# Copyright The Linux Foundation and each contributor to LFX.
# SPDX-License-Identifier: MIT

name: Weekly E2E Tests

permissions:
  id-token: write
  contents: read
  issues: write
  pull-requests: write

on:
  schedule:
    # Run every Sunday at 2:00 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      browsers:
        description: 'Browsers to test'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'chromium'
          - 'firefox'
          - 'mobile-chrome'
      branch:
        description: 'Branch to test'
        required: false
        default: 'main'
        type: string

jobs:
  determine-browsers:
    name: Determine Browser Matrix
    runs-on: ubuntu-latest
    outputs:
      browsers: ${{ steps.set-matrix.outputs.browsers }}
    steps:
      - name: Set browser matrix
        id: set-matrix
        run: |
          if [ "${{ github.event.inputs.browsers }}" = "all" ] || [ "${{ github.event.inputs.browsers }}" = "" ]; then
            echo "browsers=[\"chromium\",\"firefox\",\"mobile-chrome\"]" >> $GITHUB_OUTPUT
          else
            echo "browsers=[\"${{ github.event.inputs.browsers }}\"]" >> $GITHUB_OUTPUT
          fi

  weekly-e2e-tests:
    name: E2E Tests (${{ matrix.browser }})
    needs: determine-browsers
    strategy:
      matrix:
        browser: ${{ fromJson(needs.determine-browsers.outputs.browsers) }}
      fail-fast: false
      max-parallel: 3
    uses: ./.github/workflows/e2e-tests.yml
    with:
      node-version: '22'
      test-command: 'e2e'
      browser: ${{ matrix.browser }}
      skip-build: false
    secrets:
      TEST_USERNAME: ${{ secrets.TEST_USERNAME }}
      TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
      AI_API_KEY: ${{ secrets.AI_API_KEY }}
      AI_PROXY_URL: ${{ secrets.AI_PROXY_URL }}

  report-results:
    name: Report Weekly Test Results
    needs: [determine-browsers, weekly-e2e-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || 'main' }}

      - name: Create summary report and issue on failure
        uses: actions/github-script@v7
        with:
          script: |
            const browsers = ${{ needs.determine-browsers.outputs.browsers }};
            const results = ${{ toJson(needs.weekly-e2e-tests.result) }};
            const branch = '${{ github.event.inputs.branch || 'main' }}';
            const runId = '${{ github.run_id }}';

            let summary = `# üìä Weekly E2E Test Results\n\n`;
            summary += `**Branch:** ${branch}\n`;
            summary += `**Run ID:** ${runId}\n`;
            summary += `**Timestamp:** ${new Date().toISOString()}\n\n`;

            summary += `## Browser Results\n\n`;
            
            let overallStatus = results === 'success' ? 'success' : 'failure';
            let failedBrowsers = [];
            
            browsers.forEach(browser => {
              const browserStatus = results === 'success' ? '‚úÖ PASSED' : 
                                  results === 'failure' ? '‚ùå FAILED' : 
                                  results === 'cancelled' ? '‚èπÔ∏è CANCELLED' : '‚è≠Ô∏è SKIPPED';
              summary += `- **${browser}**: ${browserStatus}\n`;
              
              if (results === 'failure') {
                failedBrowsers.push(browser);
              }
            });
            
            summary += `\n## Overall Status: ${overallStatus === 'success' ? '‚úÖ PASSED' : '‚ùå FAILED'}\n\n`;
            
            if (failedBrowsers.length > 0) {
              summary += `### Failed Browsers\n`;
              failedBrowsers.forEach(browser => {
                summary += `- ${browser}: [View Report](https://github.com/${{ github.repository }}/actions/runs/${runId})\n`;
              });
              summary += `\n`;
            }
            
            summary += `### Test Reports\n`;
            browsers.forEach(browser => {
              summary += `- [${browser} Test Report](https://github.com/${{ github.repository }}/actions/runs/${runId})\n`;
            });
            
            console.log(summary);
            
            // Create GitHub issue if tests failed
            if (overallStatus === 'failure') {
              const title = `Weekly E2E Tests Failed - ${new Date().toISOString().split('T')[0]}`;
              const body = summary + `\n\n**Auto-generated by:** Weekly E2E Tests workflow\n**Run:** https://github.com/${{ github.repository }}/actions/runs/${runId}`;
              
              try {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body,
                  labels: ['bug', 'e2e-tests', 'automated']
                });
                
                console.log('‚úÖ Created GitHub issue for test failures');
              } catch (error) {
                console.log('‚ùå Failed to create GitHub issue:', error.message);
              }
            } else {
              console.log('‚úÖ All tests passed - no issue created');
            }